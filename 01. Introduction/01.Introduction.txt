iOS - Stanford
Introduction to iOS 11, Xcode 9 and Swift 4
https://www.youtube.com/watch?v=71pyOB4TPRE&list=PLPA-ayBrweUzGFmkT_W65z64MoGnKRZMq

0. General:
- Cocoa is OOP
- Design: MVC
- iOS is object oriented
- Requires a lot of code writing
- OpenGL: Open Graphics Library is a cross-language, cross-platform application API for rendering 2D/3D vector graphics

- Practice: Any time you're copying and pasting code => There's something wrong!
1. iOS structure:

  <User>
  Cocoa Touch
  Media
  [Core Services] - Object-oriented layer
  [Core OS]       - Low-level services
  <Hardware>

1.1. Core OS: Mostly in C
- It's Unix
- OSX Kernel
- Mach 3.0: Kernel
- BSD
- Sockets: Unix domain socket, an end-point in local inter-process communication
- Security
- Power Management
- Keychain access
- Certificates
- File System
- Bonjour: Zero-configuration networking, enables automatic discovery of devices and services on a local network

1.2. Core Services:
- Collections
- Address Book
- Networking
- File Access
- SQLite
- Core Location
- Net Services
- Threading
- Preferences
- URL Utilities

1.3. Media:
- Core Audio
- OpenAL: OpenAL is a cross-platform audio application programming interface
- Audio Mixing
- Audio Recording
- Video Playback
- JPEG, PNG, TIFF (Tagged Image File Format)
- PDF
- Quartz (2D): Quartz 2D is the native two-dimensional graphics rendering API for macOS and iOS platforms
- Core Animation
- Core Graphics
- OpenGL ES: OpenGL for Embedded System

1.4. Cocoa Touch
- Prononciation [koko tatS]
- [Definition]: UI framework for building software programs for iOS
- It's an abstraction layer
- It's an UI layer: buttons, sliders and etc
- [Cocoa]: Apple's native object-oriented API for their operating system macOS

- Based on macOS Cocoa API

- MVC [model-view-controller] architecture
- Contains different [graphical control elements] than Cocoa

Elements:
- Multi-Touch
- Core Motion
- View Hierarchy
- Localization
- Controls
- Alerts
- Web Views
- Map Kit
- Image Picker
- Camera

2.Platform components:
- IDE:              Xcode 9
- Language:         Swift 4
- Frameworks:       UIKit, Foundations, MapKit, CoreData...
- Design strategy:  MVC

3. UIViewController:
- Usually, in an app, a new class is created and it inherits the needed propertires from UIViewController
- [Views]: You can create view via [Storyboard] or [nib] files

- [viewDidLoad()]: Called after the controller's view is loaded into memory.

- [IBAction]     : Type qualifier used by Interface Builder to _expose_ a method as a connection point between UI elements and app code.
                   Used instead of a void return type in a method declaration

- [Target-Action Design pattern]:
  Target-action is a design pattern in which an object holds the information necessary to send a message to another
  object when an event occurs. The stored information consists of two items of data: an action selector,
  which identifies the method to be invoked, and a target, which is the object to receive the message.
  The message sent when the event occurs is called an action message.
  Although the target can be any object, even a framework object, it is typically a custom controller that handles
  the action message in an application-specific way.

- [AppKit]:
  AppKit contains all the objects you need to implement the user interface for a macOS app—windows, panels, buttons,
  menus, scrollers, and text fields—and it handles all the details for you as it efficiently draws on the screen,
  communicates with hardware devices and screen buffers, clears areas of the screen before drawing, and clips views.

4. Methods
- [sender] = argument

- [Method signature]: method name, and the number, types and order of its parameters

- [!]: In Swift you can have functions outside of classes ("global functions"). It's done very rarely, though.

- [Button states]: Buttons have five states that define their appearance:
  -- default
  -- highlighted
  -- focused
  -- selected
  -- disabled

- [Return value] type:
  @IBAction func touchCard(sender: UIButton) -> Int
  ^--- returns an int

- [Function]:
  func greet(person: String) -> String
  {
      let greeting = "Hello, " + person + "!"
      return greeting
  }

  print(greet(person: "Brian"))

- [let]: define a constant
        let PI = 3.14
- [var]: define a variable
        var temperature = 32

- [deinit]: Called immediately before a class instance is deallocated.

- [.] - "send a message"
  button.Color

4. Properties:
- [Stored properties]:
  In its simplest form, a stored property is a constant or variable that is stored as part of an instance of a particular
  class or structure. Stored properties can be either:
  - variable stored properties: var
  - constant stored properties: let
  - lazy     stored properties: lazy
    Lazy properties are useful when the initial value for a property is dependent on outside factors whose values are not known until
    after an instance’s initialization is complete.

    // The example below uses a lazy stored property to avoid unnecessary initialization of a complex class.
    lazy var importer = DataImporter()

 - computed properties: they don't define variables, instead compute the value by combinining other initialized properties

5. Initializers (of properties):
 - [!] In Swift: [property] == [instant variable] == field
 - [initializer] - like a constructor
 - [!]: In iOS fields ("properties") either have to have a default value
   OR
   to be initialized via a constructor ("initializer")
- [type inference]: guessing the data type, based on data

    // Variable definition, explicit
    var flipCount: Int = 0

    // Variable definition, using [type inference]
    var flipCount = 0

6. IB: InterfaceBuilder:
  Type qualifiers (directives), which are put in front of a [property]/[instance variable]:
  - [action]:           IBAction                   - it creates a method
  - [outlet]:           IBOutlet                   - it creates an [instance variable / property]
  - [outlet collection] Array<UIButton, [UIButton] - an array of the things in the UI
  - [!]: Do NOT change the names of properties, which are already connected to the Storyboard!

7. Storage pointers:
 - Strong: "keep this in the heap until I - (a strong pointer) - don't point to it anymore"
 - Weak:   "keep this as long as someone else points to it strongly"

   Example:
   Imagine our object is a dog, and that the dog wants to run away (be deallocated).

   Strong pointers are like a leash on the dog. As long as you have the leash attached to the dog, the dog will not run away.
   If five people attach their leash to one dog, (five strong pointers to one object), then the dog will not run away until all five leashes are
   detached.

   Weak pointers, on the other hand, are like little kids pointing at the dog and saying "Look! A dog!".
   As long as the dog is still on the leash, the little kids can still see the dog, and they'll still point to it.
   As soon as all the leashes are detached, though, the dog runs away no matter how many little kids are pointing to it.

   As soon as the last strong pointer (leash) no longer points to an object, the object will be deallocated, and all weak pointers will be zeroed out.

8. Exclamation marks:
- [variable!] - The exclamation mark effectively says, “I know that this optional definitely has a value; please use it.” This is known as forced unwrapping of the optional’s value:

  // Implicit value
  let possibleString: String? = "An optional string."
  print(possibleString!) // requires an exclamation mark to access its value

  // Explicit value
  let assumedString: String! = "An implicitly unwrapped optional string."
  print(assumedString)  // no exclamation mark is needed to access its value

9. Property observer:

    var flipCount = 0
    {

        // Property observer: observes changes on the field
        // Every time [flipCount] changes, this code is executed
        didSet
        {

        }
    }

10. Optionals:
- [Int ]    - Integer
- [Int?]    - "Optional". Has 2 states: [set] and [not set]
- [nil]     - An [optional] (variableName?) which is not set
- [sender!] - Assume this [optional] is set, and grab the value
- [!] - [optional] does not crash, when there is no value set. [assume] (!) does crash
